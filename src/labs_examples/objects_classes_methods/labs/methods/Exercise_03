
Create a new class called MethodTraining.java and in this class please do the following:

    1) Demonstrate method overloading in this class

    -demonstrated in Sum class

    2) Demonstrate the difference between "pass by value" and "pass by reference"

    -demonstrated in PassByValue and PassByReference

    3) Create a method that will return the largest of 4 numbers (all of which are passed in as arguments)

    -code in MethodTraining

    4) Write a method to count all consonants (the opposite of vowels) in a String

    -code in MethodTraining

    5) Write a method that will print some kind of ascii art to the console (Google "ascii art" if needed)

    -code in MethodTraining

    6) Write a method that will determine whether or not a number is prime

    -code in MethodTraining

    7) Write a method that will return a small array containing the highest and lowest numbers in a given numeric array,
            which is passed in as an argument

    -code in MethodTraining

    8) Write a method that takes 3 arguments (int maxNum, int divisor1, int divisor2) and returns an Integer Arraylist.
        In this method create an Integer ArrayList and populate it with each number between zero and maxNum that is
        divisible by both divisor1 and divisor2. Then return this ArrayList. After calling this method, print out the
        length of the returned list

    -code in Exercise3_8

    9) Write a method that will reverse an array in place use only one extra temp variable. For this exercise you cannot
        instantiate a second array. You must reverse the array in place using only one extra temp variable. Hint: this
        variable is used to temporarily store individual values in the array

    -code in MethodTraining

pass by value
- with primitive data types, when you pass to another method, method gets copy of variables

pass by reference
- after method is called, object is modified
-

toString
- concatenated string that describes object

method overloading
- polymorphism
- 2 or more methods with same name exist
- but methods must have different parameter types or different number of parameters

- example:

//method one - takes in two ints and returns the sum as an int
int addition(int a, int b){
    return a + b
}
//method two - takes in three ints and returns the sum as an int
int addition(int a, int b, int c){
    return a + b + c
}
//method three - takes in three doubles and returns the sum as an int
int addition(double a, double b, double c){
    return ((int)(a + b + c))
}